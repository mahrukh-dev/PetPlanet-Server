@page "/login-header"
@using Microsoft.AspNetCore.Components.Web

@inject NavigationManager NavigationManager

<link  href="css/LoginHeader.css" rel="stylesheet" />

<div class="wrapper">
    <div class="login_box">
        <div class="login-header">
            <span>Login</span>
        </div>

        <div class="input_box">
            <input type="text" @bind="user.UserEmail" id="user" class="input-field" required>
            <label for="user" class="label">User Email</label>
            <i class="bx bx-user icon"></i>
        </div>

        <div class="input_box">
            <input type="password" @bind="user.UserPassword" id="pass" class="input-field" required>
            <label for="pass" class="label">Password</label>
            <i class="bx bx-lock-alt icon"></i>
        </div>

        <div class="remember-forgot">
            <div class="remember-me">
                <input type="checkbox" id="remember">
                <label for="remember">Remember me</label>
            </div>
            <div class="forgot">
                <a href="#">Forgot password?</a>
            </div>
        </div>

        <div class="inputbox">
            <input type="submit" class="input-submit" @onclick="Login" value="Login">
        </div>

        <div class="register">
            <span>Don't have an account? <a href="/signup">Register</a></span>
        </div>
    </div>
</div>


<!-- Your login page content remains the same -->
@code {
    User user { get; set; } = new User();

    private void Login()
    {
        if (ValidateUser())
        {
            User search = DALServiceUsers.FindUserByEmail(user.UserEmail.ToString());
            if (search != null && user.UserPassword == search.UserPassword)
            {
                // Successful login, navigate to the user's home page
                NavigationManager.NavigateTo($"/home/{search.UserName}");
            }
            else
            {
                // Failed login, show an error message or handle accordingly
                // You might want to add a property to store error messages and display them in the UI
            }
        }
        else
        {
            // User object is not valid, show an error message or handle accordingly
        }
    }

    private bool ValidateUser()
    {
        // Add any additional validation logic here
        // For example, check if the user object has a valid email format, etc.

        // For simplicity, let's assume the user object is always valid in this example
        return true;
    }
}
